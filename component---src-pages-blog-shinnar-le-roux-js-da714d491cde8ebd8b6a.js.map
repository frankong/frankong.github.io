{"version":3,"sources":["webpack:///./src/pages/blog/shinnar_le_roux.js","webpack:///./src/components/text.js","webpack:///./src/components/math.js","webpack:///./node_modules/core-js/modules/es6.string.raw.js","webpack:///./src/components/figure.js"],"names":["Math","inline","block","Text","children","className","string","String","raw","$export","toIObject","toLength","S","callSite","tpl","len","length","aLen","arguments","res","i","push","join","Figure","src"],"mappings":"gpJAWe,qBACX,OACH,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,+CACA,kBAAC,IAAD,wBACA,kBAAC,IAAD,KACE,sUAGA,qKAGA,6CACA,+GAC6EA,IAAKC,OADlF,sDACyLD,IAAKC,OAD9L,UAGA,mFACiDD,IAAKC,OADtD,aACwED,IAAKC,OAD7E,oGACsLD,IAAKC,OAD3L,MAGA,qDAdF,kDAgBGD,IAAKE,MAhBR,KAiBGF,IAAKE,MAjBR,KAkBGF,IAAKE,MAlBR,KAmBE,2BACL,0DACCF,IAAKE,MAFD,KAGJF,IAAKE,MAHD,KAIJF,IAAKE,MAJD,KAKJF,IAAKE,MALD,MAOA,uDAEJF,IAAKE,MAFD,MAIA,uCAEJF,IAAKE,MAFD,MAIA,wCAEJF,IAAKE,MAFD,KAGJF,IAAKE,MAHD,MAKA,oDAEJF,IAAKE,MAFD,KAGJF,IAAKE,MAHD,KAIJF,IAAKE,MAJD,MAvCF,8BA6C8BF,IAAKC,OA7CnC,yBA6C+DD,IAAKC,OA7CpE,oCA8CGD,IAAKE,MA9CR,WAgDGF,IAAKE,MAhDR,U,kCCjBL,2DAEe,SAASC,EAAT,GAA2B,IAAZC,EAAW,EAAXA,SAC1B,OACH,yBAAKC,UAAU,0BACZD,K,qQCMW,KAACF,MAThB,SAAeI,GACX,OAAOC,OAAOC,IAAd,IAAsBF,EAAOE,MAQVP,OALvB,SAAgBK,GACZ,OAAOC,OAAOC,IAAd,IAAsBF,EAAOE,Q,qBCPjC,IAAIC,EAAU,EAAQ,QAClBC,EAAY,EAAQ,QACpBC,EAAW,EAAQ,QAEvBF,EAAQA,EAAQG,EAAG,SAAU,CAE3BJ,IAAK,SAAaK,GAMhB,IALA,IAAIC,EAAMJ,EAAUG,EAASL,KACzBO,EAAMJ,EAASG,EAAIE,QACnBC,EAAOC,UAAUF,OACjBG,EAAM,GACNC,EAAI,EACDL,EAAMK,GACXD,EAAIE,KAAKd,OAAOO,EAAIM,OAChBA,EAAIH,GAAME,EAAIE,KAAKd,OAAOW,UAAUE,KACxC,OAAOD,EAAIG,KAAK,Q,oCCftB,2DAEe,SAASC,EAAT,GAA6B,IAAZnB,EAAW,EAAXA,SAC5B,OACH,gCACE,4BAAQC,UAAU,UACV,yBAAKmB,IAAKpB,EAAUC,UAAU","file":"component---src-pages-blog-shinnar-le-roux-js-da714d491cde8ebd8b6a.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../../components/layout\"\nimport Title from \"../../components/title\"\nimport Subtitle from \"../../components/subtitle\"\nimport Text from \"../../components/text\"\nimport Figure from \"../../components/figure\"\nimport Block from \"../../components/block\"\nimport Math from \"../../components/math\"\n\n\nexport default () => {\n    return (\n\t<Layout>\n\t  <Block>\n\t    <Title>Notes on the Shinnar-Le-Roux Algorithm</Title>\n\t    <Subtitle>June 11th, 2020</Subtitle>\n\t    <Text>\n\t      <p>\n\t\tThe Shinnar-Le-Roux (SLR) algorithm is the go-to method for designing radiofrequency (RF) excitation pulses in MRI. It can reduce a highly non-linear problem to a simple-to-solve filter design problem. Different physicals constraints, such as bandwidth and sharpness, can easily be accommodated.\n\t      </p>\n\t      <p>\n\t\tIn this post, I will derive the SLR algorithm, first using magnetization representations, then convert it into spinor representations.\n\t      </p>\n\t      <h5>Problem Setup</h5>\n\t      <p>\n\t\tWe consider magnetization represented in the three-dimensional Block vector form {Math.inline`\\mathbf{M} = (M_x, M_y, M_z)^T \\in \\mathbb{R}^3`}. We also define the transverse magnetization {Math.inline`M_{xy} = M_x + i M_y \\in \\mathbb{C}`}.\n\t      </p>\n\t      <p>\n\t\tWe assume relaxation effects are neglegible, that is {Math.inline`T_1`} and {Math.inline`T_2`} are infinite. For simplicity, we consider an initial magnetization vector at resting state {Math.inline`\\mathbf{M}_0 = (0, 0, 1)^T`}\n\t      </p>\n\t      <h5>Vector representation</h5>\n\t      We consider vector representations of the form:\n\t      {Math.block`\\mathbf{M} = \\begin{pmatrix} M_{xy} \\\\ M_{xy}^* \\\\ M_z \\end{pmatrix}`}\n\t      {Math.block`| M_{xy} |^2 + | M_z |^2 = 1`}\n\t      {Math.block`\\mathbf{M}_n(z) = \\sum_{i = -n}^n \\mathbf{M}_{n, i} z^{-i}`}\n\t      <p>\n\t\t<h5>Quarternion representation</h5>\n\t\t{Math.block`\\boldsymbol{\\rho} = \\frac{1}{2} \\begin{pmatrix} 1 + M_z & M_{xy} \\\\ M_{xy}^* & 1 - M_z \\end{pmatrix}`}\n\t\t{Math.block`\\{ \\boldsymbol{\\rho} \\in \\mathbb{C}^{2 \\times 2}: \\boldsymbol{\\rho} \\succeq 0, \\text{tr}(\\boldsymbol{\\rho}) = 1, \\text{rank}(\\boldsymbol{\\rho}) = 1\\}`}\n\t\t{Math.block`\\boldsymbol{\\rho}_n(z) = \\sum_{i = -n}^n \\boldsymbol{\\rho}_{n, i} z^{-i}`}\n\t\t{Math.block`\\text{tr}(\\boldsymbol{\\rho}^2_n(z)) = 1`}\n\t      </p>\n\t      <p>\n\t\tOff resonance precession:\n\t\t{Math.block`\\mathcal{P}(z) \\boldsymbol{\\rho} = \\begin{pmatrix} z^{1 / 2} & 0 \\\\ 0 & z^{-1 / 2} \\end{pmatrix} \\boldsymbol{\\rho} \\begin{pmatrix} z^{-1 / 2} & 0 \\\\ 0 & z^{1 / 2} \\end{pmatrix}`}\n\t      </p>\n\t      <p>\n\t\tRF pulse:\n\t\t{Math.block`\\mathcal{R}_n\\boldsymbol{\\rho} = \\begin{pmatrix} c_n & s_n \\\\ -s_n & c_n \\end{pmatrix} \\boldsymbol{\\rho} \\begin{pmatrix} c_n & s_n \\\\ s_n & c_n \\end{pmatrix}`}\n\t      </p>\n\t      <p>\n\t\tInduction:\n\t\t{Math.block`\\boldsymbol{\\rho}_n(z) = \\mathcal{R} \\mathcal{P}(z) \\boldsymbol{\\rho}_{n - 1}(z)`}\n\t\t{Math.block`\\boldsymbol{\\rho}_n(z) = \\mathcal{R}_n \\mathcal{P}(z) \\boldsymbol{\\rho}_0`}\n\t      </p>\n\t      <p>\n\t\tSpinor representation:\n\t\t{Math.block`\\boldsymbol{\\rho} = \\boldsymbol{\\psi} \\boldsymbol{\\psi}^*`}\n\t\t{Math.block`\\boldsymbol{\\psi} = \\begin{pmatrix} \\alpha \\\\ \\beta \\end{pmatrix}`}\n\t\t{Math.block`\\boldsymbol{\\psi}_n(z) = \\begin{pmatrix} c_n & s_n \\\\ -s_n & c_n \\end{pmatrix} \\begin{pmatrix} 1 & 0 \\\\ 0 & z^{-1} \\end{pmatrix} \\boldsymbol{\\psi}_{n - 1}(z)`}\n\t      </p>\n\t      By induction, at each step {Math.inline`n`}, it is a degree-{Math.inline`n`} vector polynomial, that is,\n\t      {Math.block`\\boldsymbol{\\psi}_n(z) = \\sum_{i = 0}^n \\boldsymbol{\\psi}_{n, i} z^{-i}`}\n\t      And\n\t      {Math.block`\\| \\boldsymbol{\\psi}_n (z) \\|_2^2 = 1`}\n\t    </Text>\n\t  </Block>\n\t</Layout>\n    )\n}\n","import React from \"react\"\n\nexport default function Text({children}) {\n    return (\n\t<div className=\"text-justify text-body\">\n\t  {children}\n\t</div>\n    )\n}\n","import React from \"react\"\n\nfunction block(string) {\n    return String.raw`\\[${string.raw}\\]`\n}\n\nfunction inline(string) {\n    return String.raw`\\(${string.raw}\\)`\n}\n\n\nexport default {block, inline};\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","import React from \"react\"\n\nexport default function Figure({children}) {\n    return (\n\t<center>\n\t  <figure className=\"figure\">\n      \t    <img src={children} className=\"figure-img img-fluid rounded\"/>\n\t  </figure>\n\t</center>\n    )\n}\n"],"sourceRoot":""}